version: 2.1

orbs:
  python: circleci/python@0.2.1

jobs:
  backend-build:
    machine:
      image: ubuntu-2404:2024.05.1
    steps:
      - checkout
      # restore cache and docker layer cache
      - restore_cache:
          keys:
            - jarrback-{{ .Environment.CACHE_VERSION }}.{{ .Branch }}
          paths:
            - ~/caches/jarr-server.tar
            - ~/caches/jarr-worker.tar
      - run:
          name: Loading docker image layer caches
          command: |
            set +o pipefail
            docker load -i ~/caches/jarr-server.tar | true
            docker load -i ~/caches/jarr-worker.tar | true
            mkdir -p ~/caches
      - run:
          name: Building docker backend images
          command: |
            make build-base
            make build-server
            make build-worker
      - run:
          name: Saving docker image layer caches
          command: |
            docker save -o ~/caches/jarr-server.tar jarr-server
            docker save -o ~/caches/jarr-worker.tar jarr-worker
      - save_cache:
          key: jarrback-{{ .Environment.CACHE_VERSION }}.{{ .Branch }}-{{ epoch }}
          paths:
            - ~/caches/jarr-server.tar
            - ~/caches/jarr-worker.tar

  front-build:
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - checkout
      # restore cache and docker layer cache
      - restore_cache:
          keys:
            - jarrfront-{{ .Environment.CACHE_VERSION }}.{{ .Branch }}
          paths:
            - ~/caches/jarr-front.tar
      - run:
          name: Loading docker image layer caches
          command: |
            set +o pipefail
            docker load -i ~/caches/jarr-front.tar | true
      - run:
          name: Building images for front
          command: |
            mkdir -p ~/caches
            make build-front PUBLIC_URL=https://app.jarr.info REACT_APP_API_URL=https://api.jarr.info
      - run:
          name: Saving docker image layer caches
          command: |
            docker save -o ~/caches/jarr-front.tar jarr-front
      - save_cache:
          key: jarrfront-{{ .Environment.CACHE_VERSION }}.{{ .Branch }}-{{ epoch }}
          paths:
            - ~/caches/jarr-front.tar

  backend-test:
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - checkout
      # restore cache and docker layer cache
      - restore_cache:
          keys:
            - jarrback-{{ .Environment.CACHE_VERSION }}.{{ .Branch }}
          paths:
            - ~/caches/jarr-server.tar
            - ~/caches/jarr-worker.tar
      - run:
          name: Loading docker image layer caches
          command: |
            docker load -i ~/caches/jarr-server.tar
            docker load -i ~/caches/jarr-worker.tar
      - run:
          name: Moving test config to default config
          command: |
            mkdir -p ~/coverage_results
            rm example_conf/jarr.test.json example_conf/jarr.json
            mv example_conf/jarr.circleci.json example_conf/jarr.json
      - run:
          name: Starting test environment
          command: |
            make start-env RUN= COMPOSE_FILE=Dockerfiles/circleci-env.yml
            sleep 2
            make db-bootstrap-user RUN= COMPOSE_FILE=Dockerfiles/circleci-env.yml
            make db-bootstrap-tables RUN= COMPOSE_FILE=Dockerfiles/circleci-env.yml
      - run:
          name: Bootstraping database
          command: >-
            docker-compose --file Dockerfiles/circleci-env.yml --project-name=jarr
            exec server bash -c "make init-env"
      - run:
          name: Installing testing dependencies
          command: >-
            docker-compose --file Dockerfiles/circleci-env.yml --project-name=jarr
            exec server bash -c "make install"
      - run:
          name: Running tests
          command: >-
            docker-compose --file Dockerfiles/circleci-env.yml --project-name=jarr
            exec server bash -c "make test JARR_CONFIG=example_conf/jarr.json"
      - run:
          name: Uplaoding coverage to codacy
          command: >-
            docker-compose --file Dockerfiles/circleci-env.yml --project-name=jarr
            exec -u root server bash -c "chown -R jarr:jarr /jarr/coverage_results";
            docker-compose --file Dockerfiles/circleci-env.yml --project-name=jarr
            exec server bash -c
            "pipenv run coverage xml -o coverage_results/coverage.xml";
            pip install --upgrade codacy-coverage;
            python-codacy-coverage -r ~/coverage_results/coverage.xml
      - run:
          name: Running PEP8 linter
          command: >-
            docker-compose --file Dockerfiles/circleci-env.yml
            --project-name=jarr
            exec server bash -c "make lint"

  push-docker-images:
    machine:
      image: ubuntu-2004:202201-02
    environment:
      GIT_TAG: << pipeline.git.tag >>
    steps:
      - restore_cache:
          keys:
            - jarrback-{{ .Environment.CACHE_VERSION }}.{{ .Branch }}
          paths:
            - ~/caches/jarr-server.tar
            - ~/caches/jarr-worker.tar
      - restore_cache:
          keys:
            - jarrfront-{{ .Environment.CACHE_VERSION }}.{{ .Branch }}
          paths:
            - ~/caches/jarr-front.tar
      - run:
          name: Loading ALL docker image layer caches
          command: |
            set +o pipefail
            docker load -i ~/caches/jarr-server.tar
            docker load -i ~/caches/jarr-worker.tar
            docker load -i ~/caches/jarr-front.tar
      - run:
          name: Pushing tested images to registry
          command: |
            echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin
            if [ "$GIT_TAG" != "<nil>" ] && [ "$GIT_TAG" != "" ]; then
              export DOCKER_TAG=$GIT_TAG
            else
              export DOCKER_TAG=latest
            fi
            docker image tag jarr-server $DOCKER_USER/jarr-server:$DOCKER_TAG
            docker image tag jarr-worker $DOCKER_USER/jarr-worker:$DOCKER_TAG
            docker image tag jarr-front $DOCKER_USER/jarr-front:$DOCKER_TAG
            docker push $DOCKER_USER/jarr-server:$DOCKER_TAG
            docker push $DOCKER_USER/jarr-worker:$DOCKER_TAG
            docker push $DOCKER_USER/jarr-front:$DOCKER_TAG

workflows:
  jarr-testing:
    jobs:
      - backend-build:
          filters:
            tags:
              only: /.*/
      - front-build:
          filters:
            tags:
              only: /.*/
      - backend-test:
          requires:
            - backend-build
          filters:
            tags:
              only: /.*/
      - push-docker-images:
          requires:
            - backend-test
            - front-build
          filters:
            branches:
              only:
                - master
            tags:
              only: /.*/
