version: 2.1

orbs:
  python: circleci/python@0.2.1

jobs:
  backend-build:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      # restore cache and docker layer cache
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - ~/caches/jarr-server.tar
            - ~/caches/jarr-worker.tar
      - run:
          name: Load Docker image layer caches
          command: |
            set +o pipefail
            docker load -i ~/caches/jarr-server.tar | true
            docker load -i ~/caches/jarr-worker.tar | true
      - run:
          name: building images
          command: |
            mkdir -p ~/caches
            if [ "$CIRCLE_BRANCH" = "master" ]; then
              make build-server DOCKER_TAG=":latest"
              make build-worker DOCKER_TAG=":latest"
            else
              make build-server DOCKER_TAG=":develop"
              make build-worker DOCKER_TAG=":develop"
            fi
      # save built layers and image in cache
      - run:
          name: Save Docker image layer cache
          command: |
            docker save -o ~/caches/jarr-server.tar jarr-server
            docker save -o ~/caches/jarr-worker.tar jarr-worker

  backend-test:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      # restore cache and docker layer cache
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - ~/caches/jarr-server.tar
            - ~/caches/jarr-worker.tar
      - run:
          name: Load Docker image layer caches
          command: |
            docker load -i ~/caches/jarr-server.tar
            docker load -i ~/caches/jarr-worker.tar
      - run:
          name: moving test config to default config
          command: |
            mkdir -p ~/coverage_results
            rm example_conf/jarr.test.json example_conf/jarr.json
            mv example_conf/jarr.circleci.json example_conf/jarr.json
      - run:
          name: starting test env
          command: |
            docker-compose --file Dockerfiles/circleci-env.yml up -d
            sleep 10s
      - run:
          name: creating postgres db
          command: >-
            docker-compose --file Dockerfiles/circleci-env.yml
            exec postgresql su postgres -c
            "createdb jarr --no-password"
      - run:
          name: creating tables
          command: >-
            docker-compose --file Dockerfiles/circleci-env.yml
            exec server bash -c "pipenv run ./manager.py db_create"
      - run:
          name: installing testing dependencies
          command: >-
            docker-compose --file Dockerfiles/circleci-env.yml
            exec server bash -c "pipenv sync --dev --bare"
      - run:
          name: running tests
          command: >-
            docker-compose --file Dockerfiles/circleci-env.yml
            exec server bash -c
            "pipenv run nosetests tests/ -vv --with-coverage --cover-package=jarr"
      - run:
          name: uplaoding coverage
          command: >-
            docker-compose --file Dockerfiles/circleci-env.yml \
            exec server bash -c
            "pipenv run coverage xml -o coverage_results/coverage.xml";
            pip install --upgrade codacy-coverage;
            python-codacy-coverage -r ~/coverage_results/coverage.xml
      - run:
          name: "linter: pep8"
          command: >-
            docker-compose --file Dockerfiles/circleci-env.yml
            exec server bash -c
            "pipenv run pycodestyle --ignore=E126,E127,E128,W503 jarr/ --exclude=jarr/migrations"
      - run:
          name: "linter: mypy"
          command: >-
            docker-compose --file Dockerfiles/circleci-env.yml
            exec server bash -c
            "pipenv run mypy jarr --ignore-missing-imports"

  push-docker-images:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - ~/caches/jarr-server.tar
            - ~/caches/jarr-worker.tar
      - run:
          name: Load Docker image layer caches
          command: |
            set +o pipefail
            docker load -i ~/caches/jarr-server.tar
            docker load -i ~/caches/jarr-worker.tar
      - run:
          name: Push tested image to registry
          command: |
            echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin
            if [ "$CIRCLE_BRANCH" = "master" ]; then
              docker push jaesivsm/jarr-server:latest
              docker push jaesivsm/jarr-worker:latest
            else
              docker push jaesivsm/jarr-server:develop
              docker push jaesivsm/jarr-worker:develop
            fi

workflows:
  jarr-testing:
    jobs:
      - backend-build
      - backend-test:
          requires:
            - backend-build
      - push-docker-images:
          requires:
            - backend-test
          filters:
            branches:
              only:
                - master
                - develop  # TODO: remove when merging to master
